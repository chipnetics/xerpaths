link ximage
link fullimag
link strings
link tuple

record r_relation(rel_type,start_id,end_id)
record r_task(task_id,task_code,task_name,
                base_start,base_finish,base_duration,
                target_start,target_finish,
                actual_start,actual_finish,
                early_start,early_finish,
                late_start,late_finish,
                is_completed,actual_duration,
                opti_duration,target_duration,pess_duration,
                pert_mean,prior_alpha,prior_beta,
                evidence,pace)


# Record for import of ranging template fields (only what's neccessary)
record r_ranging_template(task_code,category,opti_decimal,pess_decimal)

global g_arr_relations
global g_tbl_tasks_code
global g_tbl_tasks_id
global g_tbl_ranging_template
global g_tbl_trans_early_lags     # table for lag from pred to succ (key is predsucc concatenated)
global g_tbl_trans_target_lags     # table for lag from pred to succ (key is predsucc concatenated)
global g_tbl_trans_late_lags      # table for lag from pred to succ (key is predsucc concatenated)

# procedure to load the ranging template
procedure import_ranging_template(ranging_filename)
    local ranging_file := open(ranging_filename,"r") | stop("Cannot open ranging file.")
    every put(ranging_data := [],!ranging_file)
    pop(ranging_data)  # Pop off the header.
    g_tbl_ranging_template := table()
    every ranging_line := !ranging_data do {
        fields := fieldlist(ranging_line,"\t")
        insert(g_tbl_ranging_template,fields[1],r_ranging_template(fields[1],fields[3],fields[4],fields[5]))
    }
end

# procedure to update the target duration in the structures with the original baseline duration
# hopefully for better accuracy.
procedure update_curr_structures(xer_filename)

    local xer_file := open(xer_filename,"r") | stop("Cannot open XER file to set as baseline.")
    every put(xer_data := [],!xer_file)

    index := 1
    every xer_line := !xer_data do {
        
        if xer_line == "%T\tTASK" then {
            every i:=index+2 to *xer_data do {
                if find("%T",xer_data[i])==1 then break
                fields := fieldlist(xer_data[i],"\t")
                # If the task_name exists in the table then populate baseline start/finish/duration members in record.
                if \g_tbl_tasks_code[fields[15]] then{
                    g_tbl_tasks_code[fields[15]].base_start := fields[38]
                    g_tbl_tasks_code[fields[15]].base_finish := fields[39]
                    g_tbl_tasks_code[fields[15]].base_duration := days_diff(fields[38],fields[39])
                }       
            }
        }   
        index +:= 1
    }

end

procedure add_custom_list(txt_filename)
    local txt_file := open(txt_filename,"r") | stop("Cannot open TXT file for custom codes.")
    every put(txt_data := [],!txt_file)

    clean_txt_data := []
    # Remove empty lines and comments from users custom list
    every txt_line := !txt_data do {
        if *txt_line = 0 | txt_line[1]=="#" then next
        put(clean_txt_data,txt_line)
    }

    index := 1
     every txt_line := !clean_txt_data do {
        index +:=1

        if /first_valid_entry then {
                # Generate a fake task_id and task_code for the first element in the custom list.
                fake_root_task_id := "CUSTOM_" || ?100000
                fake_root_task_code := "CUSTOM-" || ?100000
                
                real_root_task_code := clean_txt_data[index]
                real_root_task_id := g_tbl_tasks_code[real_root_task_code].task_id
                curr_record := g_tbl_tasks_code[real_root_task_code]

                ## Insert custom task code into table
                insert(g_tbl_tasks_code,fake_root_task_code,r_task(
                                    fake_root_task_id,fake_root_task_code,"User-Imported Custom Task List",
                                    "","","",  # Baseline start/finish/duration blank on initial load, unless user selects a baseline file.
                                    curr_record.target_start,curr_record.target_finish,
                                    curr_record.actual_start,curr_record.actual_finish,
                                    curr_record.early_start,curr_record.early_finish,
                                    curr_record.late_start,curr_record.late_finish,
                                    curr_record.is_completed,curr_record.actual_duration,
                                    curr_record.opti_duration,curr_record.target_duration,curr_record.pess_duration,
                                    curr_record.pert_mean,curr_record.prior_alpha,curr_record.prior_beta,
                                    curr_record.evidence,curr_record.pace))

                # Insert the association of the newly generated 'fake' task_id and task_code
                insert(g_tbl_tasks_id,fake_root_task_id,fake_root_task_code)

                /first_valid_entry := 1

                #write("Root task_code: ",real_root_task_code,"\tRoot task_id: ",real_root_task_id)
                #write("Custom task_code: ",g_tbl_tasks_code[fake_root_task_code].task_code,"\tCustom task_id: ",g_tbl_tasks_code[fake_root_task_code].task_id)
        }

        # Make fake relationship so that it's generated as a path-finding solution
        \fake_from_id := fake_to_id
        /fake_from_id := fake_root_task_id # On initial pass, if null, the first "from" is the actual task_id of the task_code
        fake_to_id := "CUSTOM_" || ?100000

        insert(g_tbl_tasks_id,fake_from_id,txt_line)
        put(g_arr_relations,r_relation("PR_FS",fake_from_id,fake_to_id))
        #write("Adding fake relation: ",fake_from_id," --> ",fake_to_id," ::: Created Map ",fake_from_id," --> ",txt_line)

        # Update transition lags...
        # This assumes that the user has organized their custom list such that each successive
        # activity follows the previous one.
        real_from_code := txt_line
        real_to_code := clean_txt_data[index]

        if *real_to_code>0 then {
            start_task_code := fake_from_id
            end_task_code := fake_to_id

            pred_early_end := g_tbl_tasks_code[real_from_code].early_finish
            succ_early_start := g_tbl_tasks_code[real_to_code].early_start
            pred_target_end := g_tbl_tasks_code[real_from_code].target_finish
            succ_target_start := g_tbl_tasks_code[real_to_code].target_start
            pred_late_end := g_tbl_tasks_code[real_from_code].late_finish
            succ_late_start := g_tbl_tasks_code[real_to_code].late_start
            
            insert(g_tbl_trans_early_lags,fake_from_id||fake_to_id,days_diff(pred_early_end,succ_early_start)) 
            insert(g_tbl_trans_target_lags,fake_from_id||fake_to_id,days_diff(pred_target_end,succ_target_start))   
            insert(g_tbl_trans_late_lags,fake_from_id||fake_to_id,days_diff(pred_late_end,succ_late_start)) 
        }

     }
     pull(g_arr_relations)  #remove extra trailing relation generated from loop. (a destination that doesn't exist)
end

procedure load_structures(xer_filename)
    local xer_file := open(xer_filename,"r") | stop("Cannot open XER file.")
    every put(xer_data := [],!xer_file)

    g_arr_relations:= []
    g_tbl_tasks_code:= table()
    g_tbl_tasks_id:= table()
    
    index := 1
    every xer_line := !xer_data do {
        if xer_line == "%T\tTASKPRED" then {
            every i:=index+2 to *xer_data do {
                if find("%T",xer_data[i])==1 then break
                fields := fieldlist(xer_data[i],"\t")
                put(g_arr_relations,r_relation(fields[7],fields[4],fields[3]))
            }
        }
        else if xer_line == "%T\tTASK" then {
            every i:=index+2 to *xer_data do {
                if find("%T",xer_data[i])==1 then break
                fields := fieldlist(xer_data[i],"\t")
                
                # Check if 100% complete, if so use actual dates o.w. use target dates.
                if fields[6]==100 then iscmpl:="Y" & act_duration:=days_diff(fields[29],fields[30])  else iscmpl:="" & act_duration:=""

                # Check if started but not completed
                if *fields[29]>0 & fields[30]=="" then iscmpl:="IP" & act_duration:="-IP-"
                
                target_duration := days_diff(fields[38],fields[39]) # target duration -> likely duration.
                
                opti := target_duration*?[0.6,0.65,0.7,0.75,0.8,0.85,0.90]
                pess := target_duration*?[1.1,1.15,1.2,1.25,1.3,1.35,1.4]

                if fields[6]==100 & (pess-opti)>0.001 & integer(act_duration)>=0 then evidence:=(act_duration-opti)/(pess-opti) & pace:=5 else evidence:="" & pace:=""

                # Put the struct into the table, with task_name as key.
                insert(g_tbl_tasks_code,fields[15],r_task(fields[2],fields[15],fields[16],
                        "","","",  # Baseline start/finish/duration blank on initial load, unless user selects a baseline file.
                        fields[38],fields[39],
                        fields[29],fields[30],
                        fields[34],fields[35],
                        fields[31],fields[32],
                        iscmpl,act_duration,
                        opti,target_duration,pess,
                        beta_mean(opti,target_duration,pess),prior_alpha(opti,target_duration,pess),prior_beta(opti,target_duration,pess),
                        evidence,pace))
                insert(g_tbl_tasks_id,fields[2],fields[15])
             }
        }
        index +:= 1
    }

    ## Calculate the lags between target_end_date of predecessor & target_start_date of successor.
    g_tbl_trans_early_lags := table(0)
    g_tbl_trans_target_lags := table(0)
    g_tbl_trans_late_lags := table(0)
    every elem := !g_arr_relations do {
        start_task_code := g_tbl_tasks_id[elem.start_id]
        end_task_code := g_tbl_tasks_id[elem.end_id]

        pred_early_end := g_tbl_tasks_code[start_task_code].early_finish
        succ_early_start := g_tbl_tasks_code[end_task_code].early_start
        pred_target_end := g_tbl_tasks_code[start_task_code].target_finish
        succ_target_start := g_tbl_tasks_code[end_task_code].target_start
        pred_late_end := g_tbl_tasks_code[start_task_code].late_finish
        succ_late_start := g_tbl_tasks_code[end_task_code].late_start

        insert(g_tbl_trans_early_lags,elem.start_id||elem.end_id,days_diff(pred_early_end,succ_early_start))
        insert(g_tbl_trans_target_lags,elem.start_id||elem.end_id,days_diff(pred_target_end,succ_target_start))
        insert(g_tbl_trans_late_lags,elem.start_id||elem.end_id,days_diff(pred_late_end,succ_late_start)) 
        #write(elem.start_id,"\t",elem.end_id,"\t",pred_target_end,"\t",succ_target_start,"\t",elem.pred_succ_lag)
    }
end

procedure print_tasks(taskid_list)
    every task := !taskid_list do write("\t",g_tbl_tasks_code[g_tbl_tasks_id[task]].task_id,"\t",g_tbl_tasks_code[g_tbl_tasks_id[task]].task_code,"\t",g_tbl_tasks_code[g_tbl_tasks_id[task]].task_name)
end

# Generates complete paths starting from 'from'
procedure gen_path(from)
    static generated := []
    every dest:=destination(from) do {
        if *generated = 0 then put(generated,from)  # Start of new generated path.
        put(generated,dest)
        gen_path(dest)
        suspend generated
        generated := []
     }
end

# Generates possible destinations from 'from'
procedure destination(from)
    repeat {
        every i:=1 to *g_arr_relations do {
            if g_arr_relations[i].start_id == from then {
                suspend g_arr_relations[i].end_id
            }
        }
        fail
    }
end

procedure beta_mean(opti,likely,pess)
    return ((pess+4*likely+opti)/6.0)
end

procedure prior_alpha(opti,likely,pess)
    if opti == pess | (pess-likely)-(likely-opti) < 0.001  then return 3
    else return (((pess+4*likely+opti)/6.0)-opti)*(2*likely-opti-pess)/((likely-((pess+4*likely+opti)/6.0))*(pess-opti))|3
end

procedure prior_beta(opti,likely,pess)
    if opti == pess | (pess-likely)-(likely-opti) < 0.001  then return 3
    else return ((((pess+4*likely+opti)/6.0)-opti)*(2*likely-opti-pess)/((likely-((pess+4*likely+opti)/6.0))*(pess-opti))*(pess-((pess+4*likely+opti)/6.0)))/(((pess+4*likely+opti)/6.0)-opti)
end

procedure post_alpha(opti,actual,pess,pace)
    return prior_alpha(opti,likely,pess) + ((actual-opti)/(pess-opti))*pace
end

procedure post_beta(opti,actual,pess,pace)
    return prior_beta(opti,likely,pess) + pace - ((actual-opti)/(pess-opti))*pace
end

procedure gamma(z)	# Stirling's approximation
    return (2*&pi/z)^0.5 * (z/&e)^z
end

procedure beta(a,b)
    return (gamma(a)*gamma(b))/gamma(a+b)
end

class beta4()

    local alpha
    local beta
    local a
    local b

    method pdf(y)
        return (1/(b-a))*((((y-a)/(b-a))^(alpha-1)*(1-((y-a)/(b-a))^(beta-1)))/beta(alpha,beta))
    end

end

